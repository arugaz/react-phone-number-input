{"version":3,"file":"PhoneInputWithCountry.js","names":["PhoneNumberInput_","props","instance","inputRef","current","ref","country","metadata","isCountrySupportedWithError","newCountry","international","onChange","focusInputOnCountrySelection","state","prevPhoneDigits","phoneDigits","prevCountry","newPhoneDigits","getPhoneDigitsForNewCountry","useNationalFormat","newValue","e164","focus","setState","hasUserSelectedACountry","value","_phoneDigits","defaultCountry","addInternationalOption","limitMaxLength","countryCallingCodeEditable","countries","currentlySelectedCountry","onPhoneDigitsChange","countryRequired","getAnyCountry","getFirstSupportedCountry","stateUpdate","forceRerender","isFocused","event","_onFocus","onFocus","onBlur","_onBlur","countrySelectProps","React","createRef","labels","displayInitialValueAsLocalNumber","initialValueFormat","undefined","getSupportedCountries","phoneNumber","parsePhoneNumber","CountryIcon","createCountryIconComponent","preSelectedCountry","getPreSelectedCountry","required","getCountries","getInitialPhoneDigits","onCountryChange","selectedCountry","prevProps","prevState","countryOptionsOrder","locales","useMemoCountrySelectOptions","sortCountryOptions","getCountrySelectOptions","countryNames","compareStringsLocales","getSupportedCountryOptions","generator","dependencies","countrySelectOptionsMemoDependencies","areEqualArrays","countrySelectOptionsMemo","countryOptions","name","disabled","readOnly","autoComplete","style","className","inputComponent","numberInputProps","smartCaret","CountrySelectComponent","countrySelectComponent","ContainerComponent","containerComponent","countriesProperty","flags","flagComponent","flagUrl","internationalIcon","reset","rest","InputComponent","InputSmart","InputBasic","countrySelectOptions","classNames","onCountryFocus","onCountryBlur","setInputRef","getPhoneInputWithCountryStateUpdateFromNewProps","PureComponent","PhoneNumberInput","forwardRef","propTypes","PropTypes","string","func","isRequired","bool","oneOf","arrayOf","labelsPropType","oneOfType","objectOf","elementType","object","metadataPropType","defaultProps","CountrySelect","Flag","InternationalIcon","any","a","b","length","i"],"sources":["../source/PhoneInputWithCountry.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport InputSmart from './InputSmart.js'\nimport InputBasic from './InputBasic.js'\n\nimport { CountrySelectWithIcon as CountrySelect } from './CountrySelect.js'\n\nimport Flag from './Flag.js'\nimport InternationalIcon from './InternationalIcon.js'\n\nimport {\n\tsortCountryOptions,\n\tisCountrySupportedWithError,\n\tgetSupportedCountries,\n\tgetSupportedCountryOptions,\n\tgetCountries\n} from './helpers/countries.js'\n\nimport { createCountryIconComponent } from './CountryIcon.js'\n\nimport {\n\tmetadata as metadataPropType,\n\tlabels as labelsPropType\n} from './PropTypes.js'\n\nimport {\n\tgetPreSelectedCountry,\n\tgetCountrySelectOptions,\n\tparsePhoneNumber,\n\tgenerateNationalNumberDigits,\n\tgetPhoneDigitsForNewCountry,\n\tgetInitialPhoneDigits,\n\tonPhoneDigitsChange,\n\te164\n} from './helpers/phoneInputHelpers.js'\n\nimport getPhoneInputWithCountryStateUpdateFromNewProps from './helpers/getPhoneInputWithCountryStateUpdateFromNewProps.js'\n\nclass PhoneNumberInput_ extends React.PureComponent {\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\tthis.inputRef = React.createRef()\n\n\t\tconst {\n\t\t\tvalue,\n\t\t\tlabels,\n\t\t\tinternational,\n\t\t\taddInternationalOption,\n\t\t\t// `displayInitialValueAsLocalNumber` property has been\n\t\t\t// superceded by `initialValueFormat` property.\n\t\t\tdisplayInitialValueAsLocalNumber,\n\t\t\tinitialValueFormat,\n\t\t\tmetadata\n\t\t} = this.props\n\n\t\tlet {\n\t\t\tdefaultCountry,\n\t\t\tcountries\n\t\t} = this.props\n\n\t\t// Validate `defaultCountry`.\n\t\tif (defaultCountry) {\n\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\n\t\t\t\tdefaultCountry = undefined\n\t\t\t}\n\t\t}\n\n\t\t// Validate `countries`.\n\t\tcountries = getSupportedCountries(countries, metadata)\n\n\t\tconst phoneNumber = parsePhoneNumber(value, metadata)\n\n\t\tthis.CountryIcon = createCountryIconComponent(this.props)\n\n\t\tconst preSelectedCountry = getPreSelectedCountry({\n\t\t\tvalue,\n\t\t\tphoneNumber,\n\t\t\tdefaultCountry,\n\t\t\trequired: !addInternationalOption,\n\t\t\tcountries: countries || getCountries(metadata),\n\t\t\tgetAnyCountry: () => this.getFirstSupportedCountry({ countries }),\n\t\t\tmetadata\n\t\t})\n\n\t\tthis.state = {\n\t\t\t// Workaround for `this.props` inside `getDerivedStateFromProps()`.\n\t\t\tprops: this.props,\n\n\t\t\t// The country selected.\n\t\t\tcountry: preSelectedCountry,\n\n\t\t\t// `countries` are stored in `this.state` because they're filtered.\n\t\t\t// For example, a developer might theoretically pass some unsupported\n\t\t\t// countries as part of the `countries` property, and because of that\n\t\t\t// the component uses `this.state.countries` (which are filtered)\n\t\t\t// instead of `this.props.countries`\n\t\t\t// (which could potentially contain unsupported countries).\n\t\t\tcountries,\n\n\t\t\t// `phoneDigits` state property holds non-formatted user's input.\n\t\t\t// The reason is that there's no way of finding out\n\t\t\t// in which form should `value` be displayed: international or national.\n\t\t\t// E.g. if `value` is `+78005553535` then it could be input\n\t\t\t// by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n\t\t\t// Hence storing just `value` is not sufficient for correct formatting.\n\t\t\t// E.g. if a user entered `8 (800) 555-35-35`\n\t\t\t// then value is `+78005553535` and `phoneDigits` are `88005553535`\n\t\t\t// and if a user entered `+7 800 555 35 35`\n\t\t\t// then value is `+78005553535` and `phoneDigits` are `+78005553535`.\n\t\t\tphoneDigits: getInitialPhoneDigits({\n\t\t\t\tvalue,\n\t\t\t\tphoneNumber,\n\t\t\t\tdefaultCountry,\n\t\t\t\tinternational,\n\t\t\t\tuseNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\n\t\t\t\tmetadata\n\t\t\t}),\n\n\t\t\t// `value` property is duplicated in state.\n\t\t\t// The reason is that `getDerivedStateFromProps()`\n\t\t\t// needs this `value` to compare to the new `value` property\n\t\t\t// to find out if `phoneDigits` needs updating:\n\t\t\t// If the `value` property was changed externally\n\t\t\t// then it won't be equal to `state.value`\n\t\t\t// in which case `phoneDigits` and `country` should be updated.\n\t\t\tvalue\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { onCountryChange } = this.props\n\t\tlet { defaultCountry } = this.props\n\t\tconst { country: selectedCountry } = this.state\n\t\tif (onCountryChange) {\n\t\t\tif (defaultCountry) {\n\t\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\n\t\t\t\t\tdefaultCountry = undefined\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (selectedCountry !== defaultCountry) {\n\t\t\t\tonCountryChange(selectedCountry)\n\t\t\t}\n\t\t}\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tconst { onCountryChange } = this.props\n\t\tconst { country } = this.state\n\t\t// Call `onCountryChange` when user selects another country.\n\t\tif (onCountryChange && country !== prevState.country) {\n\t\t\tonCountryChange(country)\n\t\t}\n\t}\n\n\tsetInputRef = (instance) => {\n\t\tthis.inputRef.current = instance\n\t\tconst { inputRef: ref } = this.props\n\t\tif (ref) {\n\t\t\tif (typeof ref === 'function') {\n\t\t\t\tref(instance)\n\t\t\t} else {\n\t\t\t\tref.current = instance\n\t\t\t}\n\t\t}\n\t}\n\n\tgetCountrySelectOptions({ countries }) {\n\t\tconst {\n\t\t\tinternational,\n\t\t\tcountryCallingCodeEditable,\n\t\t\tcountryOptionsOrder,\n\t\t\taddInternationalOption,\n\t\t\tlabels,\n\t\t\tlocales,\n\t\t\tmetadata\n\t\t} = this.props\n\t\treturn this.useMemoCountrySelectOptions(() => {\n\t\t\treturn sortCountryOptions(\n\t\t\t\tgetCountrySelectOptions({\n\t\t\t\t\tcountries: countries || getCountries(metadata),\n\t\t\t\t\tcountryNames: labels,\n\t\t\t\t\taddInternationalOption: (international && countryCallingCodeEditable === false) ? false : addInternationalOption,\n\t\t\t\t\tcompareStringsLocales: locales,\n\t\t\t\t\t// compareStrings\n\t\t\t\t}),\n\t\t\t\tgetSupportedCountryOptions(countryOptionsOrder, metadata)\n\t\t\t)\n\t\t}, [\n\t\t\tcountries,\n\t\t\tcountryOptionsOrder,\n\t\t\taddInternationalOption,\n\t\t\tlabels,\n\t\t\tmetadata\n\t\t])\n\t}\n\n\tuseMemoCountrySelectOptions(generator, dependencies) {\n\t\tif (\n\t\t\t!this.countrySelectOptionsMemoDependencies ||\n\t\t\t!areEqualArrays(dependencies, this.countrySelectOptionsMemoDependencies)\n\t\t) {\n\t\t\tthis.countrySelectOptionsMemo = generator()\n\t\t\tthis.countrySelectOptionsMemoDependencies = dependencies\n\t\t}\n\t\treturn this.countrySelectOptionsMemo\n\t}\n\n\tgetFirstSupportedCountry({ countries }) {\n\t\tconst countryOptions = this.getCountrySelectOptions({ countries })\n\t\treturn countryOptions[0].value\n\t}\n\n\t// A shorthand for not passing `metadata` as a second argument.\n\tisCountrySupportedWithError = (country) => {\n\t\tconst { metadata } = this.props\n\t\treturn isCountrySupportedWithError(country, metadata)\n\t}\n\n\t// Country `<select/>` `onChange` handler.\n\tonCountryChange = (newCountry) => {\n\t\tconst {\n\t\t\tinternational,\n\t\t\tmetadata,\n\t\t\tonChange,\n\t\t\tfocusInputOnCountrySelection\n\t\t} = this.props\n\n\t\tconst {\n\t\t\tphoneDigits: prevPhoneDigits,\n\t\t\tcountry: prevCountry\n\t\t} = this.state\n\n\t\t// After the new `country` has been selected,\n\t\t// if the phone number `<input/>` holds any digits\n\t\t// then migrate those digits for the new `country`.\n\t\tconst newPhoneDigits = getPhoneDigitsForNewCountry(prevPhoneDigits, {\n\t\t\tprevCountry,\n\t\t\tnewCountry,\n\t\t\tmetadata,\n\t\t\t// Convert the phone number to \"national\" format\n\t\t\t// when the user changes the selected country by hand.\n\t\t\tuseNationalFormat: !international\n\t\t})\n\n\t\tconst newValue = e164(newPhoneDigits, newCountry, metadata)\n\n\t\t// Focus phone number `<input/>` upon country selection.\n\t\tif (focusInputOnCountrySelection) {\n\t\t\tthis.inputRef.current.focus()\n\t\t}\n\n\t\t// If the user has already manually selected a country\n\t\t// then don't override that already selected country\n\t\t// if the `defaultCountry` property changes.\n\t\t// That's what `hasUserSelectedACountry` flag is for.\n\n\t\tthis.setState({\n\t\t\tcountry: newCountry,\n\t\t\thasUserSelectedACountry: true,\n\t\t\tphoneDigits: newPhoneDigits,\n\t\t\tvalue: newValue\n\t\t},\n\t\t() => {\n\t\t\t// Update the new `value` property.\n\t\t\t// Doing it after the `state` has been updated\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\n\t\t\t// with the new `value` which will be compared to `state.value` there.\n\t\t\tonChange(newValue)\n\t\t})\n\t}\n\n\t/**\n\t * `<input/>` `onChange()` handler.\n\t * Updates `value` property accordingly (so that they are kept in sync).\n\t * @param {string?} input — Either a parsed phone number or an empty string. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n\t */\n\tonChange = (_phoneDigits) => {\n\t\tconst {\n\t\t\tdefaultCountry,\n\t\t\tonChange,\n\t\t\taddInternationalOption,\n\t\t\tinternational,\n\t\t\tlimitMaxLength,\n\t\t\tcountryCallingCodeEditable,\n\t\t\tmetadata\n\t\t} = this.props\n\n\t\tconst {\n\t\t\tcountries,\n\t\t\tphoneDigits: prevPhoneDigits,\n\t\t\tcountry: currentlySelectedCountry\n\t\t} = this.state\n\n\t\tconst {\n\t\t\tphoneDigits,\n\t\t\tcountry,\n\t\t\tvalue\n\t\t} = onPhoneDigitsChange(_phoneDigits, {\n\t\t\tprevPhoneDigits,\n\t\t\tcountry: currentlySelectedCountry,\n\t\t\tcountryRequired: !addInternationalOption,\n\t\t\tdefaultCountry,\n\t\t\tgetAnyCountry: () => this.getFirstSupportedCountry({ countries }),\n\t\t\tcountries,\n\t\t\tinternational,\n\t\t\tlimitMaxLength,\n\t\t\tcountryCallingCodeEditable,\n\t\t\tmetadata\n\t\t})\n\n\t\tconst stateUpdate = {\n\t\t\tphoneDigits,\n\t\t\tvalue,\n\t\t\tcountry\n\t\t}\n\n\t\tif (countryCallingCodeEditable === false) {\n\t\t\t// If it simply did `setState({ phoneDigits: intlPrefix })` here,\n\t\t\t// then it would have no effect when erasing an inital international prefix\n\t\t\t// via Backspace, because `phoneDigits` in `state` wouldn't change\n\t\t\t// as a result, because it was `prefix` and it became `prefix`,\n\t\t\t// so the component wouldn't rerender, and the user would be able\n\t\t\t// to erase the country calling code part, and that part is\n\t\t\t// assumed to be non-eraseable. That's why the component is\n\t\t\t// forcefully rerendered here.\n\t\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/367#issuecomment-721703501\n\t\t\tif (!value && phoneDigits === this.state.phoneDigits) {\n\t\t\t\t// Force a re-render of the `<input/>` in order to reset its value.\n\t\t\t\tstateUpdate.forceRerender = {}\n\t\t\t}\n\t\t}\n\n\t\tthis.setState(\n\t\t\tstateUpdate,\n\t\t\t// Update the new `value` property.\n\t\t\t// Doing it after the `state` has been updated\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\n\t\t\t// with the new `value` which will be compared to `state.value` there.\n\t\t\t() => onChange(value)\n\t\t)\n\t}\n\n\t// Toggles the `--focus` CSS class.\n\t_onFocus = () => this.setState({ isFocused: true })\n\n\t// Toggles the `--focus` CSS class.\n\t_onBlur = () => this.setState({ isFocused: false })\n\n\tonFocus = (event) => {\n\t\tthis._onFocus()\n\t\tconst { onFocus } = this.props\n\t\tif (onFocus) {\n\t\t\tonFocus(event)\n\t\t}\n\t}\n\n\tonBlur = (event) => {\n\t\tconst { onBlur } = this.props\n\t\tthis._onBlur()\n\t\tif (onBlur) {\n\t\t\tonBlur(event)\n\t\t}\n\t}\n\n\tonCountryFocus = (event) => {\n\t\tthis._onFocus()\n\t\t// this.setState({ countrySelectFocused: true })\n\t\tconst { countrySelectProps } = this.props\n\t\tif (countrySelectProps) {\n\t\t\tconst { onFocus } = countrySelectProps\n\t\t\tif (onFocus) {\n\t\t\t\tonFocus(event)\n\t\t\t}\n\t\t}\n\t}\n\n\tonCountryBlur = (event) => {\n\t\tthis._onBlur()\n\t\t// this.setState({ countrySelectFocused: false })\n\t\tconst { countrySelectProps } = this.props\n\t\tif (countrySelectProps) {\n\t\t\tconst { onBlur } = countrySelectProps\n\t\t\tif (onBlur) {\n\t\t\t\tonBlur(event)\n\t\t\t}\n\t\t}\n\t}\n\n\t// `state` holds previous props as `props`, and also:\n\t// * `country` — The currently selected country, e.g. `\"RU\"`.\n\t// * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\n\t// * `phoneDigits` — The parsed `<input/>` value, e.g. `8005553535`.\n\t// (and a couple of other less significant properties)\n\tstatic getDerivedStateFromProps(props, state) {\n\t\treturn {\n\t\t\t// Emulate `prevProps` via `state.props`.\n\t\t\tprops,\n\t\t\t...getPhoneInputWithCountryStateUpdateFromNewProps(props, state.props, state)\n\t\t}\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\t// Generic HTML attributes.\n\t\t\tname,\n\t\t\tdisabled,\n\t\t\treadOnly,\n\t\t\tautoComplete,\n\t\t\tstyle,\n\t\t\tclassName,\n\n\t\t\t// Number `<input/>` properties.\n\t\t\tinputRef,\n\t\t\tinputComponent,\n\t\t\tnumberInputProps,\n\t\t\tsmartCaret,\n\n\t\t\t// Country `<select/>` properties.\n\t\t\tcountrySelectComponent: CountrySelectComponent,\n\t\t\tcountrySelectProps,\n\n\t\t\t// Container `<div/>` properties.\n\t\t\tcontainerComponent: ContainerComponent,\n\n\t\t\t// Get \"rest\" properties (passed through to number `<input/>`).\n\t\t\tdefaultCountry,\n\t\t\tcountries: countriesProperty,\n\t\t\tcountryOptionsOrder,\n\t\t\tlabels,\n\t\t\tflags,\n\t\t\tflagComponent,\n\t\t\tflagUrl,\n\t\t\taddInternationalOption,\n\t\t\tinternationalIcon,\n\t\t\t// `displayInitialValueAsLocalNumber` property has been\n\t\t\t// superceded by `initialValueFormat` property.\n\t\t\tdisplayInitialValueAsLocalNumber,\n\t\t\tinitialValueFormat,\n\t\t\tonCountryChange,\n\t\t\tlimitMaxLength,\n\t\t\tcountryCallingCodeEditable,\n\t\t\tfocusInputOnCountrySelection,\n\t\t\treset,\n\t\t\tmetadata,\n\t\t\tinternational,\n\t\t\tlocales,\n\t\t\t// compareStrings,\n\t\t\t...rest\n\t\t} = this.props\n\n\t\tconst {\n\t\t\tcountry,\n\t\t\tcountries,\n\t\t\tphoneDigits,\n\t\t\tisFocused\n\t\t} = this.state\n\n\t\tconst InputComponent = smartCaret ? InputSmart : InputBasic\n\n\t\tconst countrySelectOptions = this.getCountrySelectOptions({ countries })\n\n\t\treturn (\n\t\t\t<ContainerComponent\n\t\t\t\tstyle={style}\n\t\t\t\tclassName={classNames(className, 'PhoneInput', {\n\t\t\t\t\t'PhoneInput--focus': isFocused,\n\t\t\t\t\t'PhoneInput--disabled': disabled,\n\t\t\t\t\t'PhoneInput--readOnly': readOnly\n\t\t\t\t})}>\n\n\t\t\t\t{/* Country `<select/>` */}\n\t\t\t\t<CountrySelectComponent\n\t\t\t\t\tname={name ? `${name}Country` : undefined}\n\t\t\t\t\taria-label={labels.country}\n\t\t\t\t\t{...countrySelectProps}\n\t\t\t\t\tvalue={country}\n\t\t\t\t\toptions={countrySelectOptions}\n\t\t\t\t\tonChange={this.onCountryChange}\n\t\t\t\t\tonFocus={this.onCountryFocus}\n\t\t\t\t\tonBlur={this.onCountryBlur}\n\t\t\t\t\tdisabled={disabled || (countrySelectProps && countrySelectProps.disabled)}\n\t\t\t\t\treadOnly={readOnly || (countrySelectProps && countrySelectProps.readOnly)}\n\t\t\t\t\ticonComponent={this.CountryIcon}/>\n\n\t\t\t\t{/* Phone number `<input/>` */}\n\t\t\t\t<InputComponent\n\t\t\t\t\tref={this.setInputRef}\n\t\t\t\t\ttype=\"tel\"\n\t\t\t\t\tautoComplete={autoComplete}\n\t\t\t\t\t{...numberInputProps}\n\t\t\t\t\t{...rest}\n\t\t\t\t\tname={name}\n\t\t\t\t\tmetadata={metadata}\n\t\t\t\t\tcountry={country}\n\t\t\t\t\tvalue={phoneDigits || ''}\n\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\tonFocus={this.onFocus}\n\t\t\t\t\tonBlur={this.onBlur}\n\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\tinputComponent={inputComponent}\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'PhoneInputInput',\n\t\t\t\t\t\tnumberInputProps && numberInputProps.className,\n\t\t\t\t\t\trest.className\n\t\t\t\t\t)}/>\n\t\t\t</ContainerComponent>\n\t\t)\n\t}\n}\n\n// This wrapper is only to `.forwardRef()` to the `<input/>`.\nconst PhoneNumberInput = React.forwardRef((props, ref) => (\n\t<PhoneNumberInput_ {...props} inputRef={ref}/>\n))\n\nPhoneNumberInput.propTypes = {\n\t/**\n\t * Phone number in `E.164` format.\n\t *\n\t * Example:\n\t *\n\t * `\"+12223333333\"`\n\t *\n\t * Any \"falsy\" value like `undefined`, `null` or an empty string `\"\"` is treated like \"empty\".\n\t */\n\tvalue: PropTypes.string,\n\n\t/**\n\t * A function of `value: string?`.\n\t *\n\t * Updates the `value` property as the user inputs a phone number.\n\t *\n\t * If the user erases the input value, the argument is `undefined`.\n\t */\n\tonChange: PropTypes.func.isRequired,\n\n\t/**\n\t * Toggles the `--focus` CSS class.\n\t * @ignore\n\t */\n\tonFocus: PropTypes.func,\n\n\t/**\n\t * `onBlur` is usually passed by `redux-form`.\n\t * @ignore\n\t */\n\tonBlur: PropTypes.func,\n\n\t/**\n\t * Set to `true` to mark both the phone number `<input/>`\n\t * and the country `<select/>` as `disabled`.\n\t */\n\tdisabled: PropTypes.bool,\n\n\t/**\n\t * Set to `true` to mark both the phone number `<input/>`\n\t * and the country `<select/>` as `readonly`.\n\t */\n\treadOnly: PropTypes.bool,\n\n\t/**\n\t * Sets `autoComplete` property for phone number `<input/>`.\n\t *\n\t * Web browser's \"autocomplete\" feature\n\t * remembers the phone number being input\n\t * and can also autofill the `<input/>`\n\t * with previously remembered phone numbers.\n\t *\n\t * https://developers.google.com\n\t * /web/updates/2015/06/checkout-faster-with-autofill\n\t *\n\t * For example, can be used to turn it off:\n\t *\n\t * \"So when should you use `autocomplete=\"off\"`?\n\t *  One example is when you've implemented your own version\n\t *  of autocomplete for search. Another example is any form field\n\t *  where users will input and submit different kinds of information\n\t *  where it would not be useful to have the browser remember\n\t *  what was submitted previously\".\n\t */\n\t// (is `\"tel\"` by default)\n\tautoComplete: PropTypes.string.isRequired,\n\n\t/**\n\t * Set to `\"national\"` to show the initial `value` in\n\t * \"national\" format rather than \"international\".\n\t *\n\t * For example, if `initialValueFormat` is `\"national\"`\n\t * and the initial `value=\"+12133734253\"` is passed\n\t * then the `<input/>` value will be `\"(213) 373-4253\"`.\n\t *\n\t * By default, `initialValueFormat` is `undefined`,\n\t * meaning that if the initial `value=\"+12133734253\"` is passed\n\t * then the `<input/>` value will be `\"+1 213 373 4253\"`.\n\t *\n\t * The reason for such default behaviour is that\n\t * the newer generation grows up when there are no stationary phones\n\t * and therefore everyone inputs phone numbers in international format\n\t * in their smartphones so people gradually get more accustomed to\n\t * writing phone numbers in international format rather than in local format.\n\t * Future people won't be using \"national\" format, only \"international\".\n\t */\n\t// (is `undefined` by default)\n\tinitialValueFormat: PropTypes.oneOf(['national']),\n\n\t// `displayInitialValueAsLocalNumber` property has been\n\t// superceded by `initialValueFormat` property.\n\tdisplayInitialValueAsLocalNumber: PropTypes.bool,\n\n\t/**\n\t * The country to be selected by default.\n\t * For example, can be set after a GeoIP lookup.\n\t *\n\t * Example: `\"US\"`.\n\t */\n\t// A two-letter country code (\"ISO 3166-1 alpha-2\").\n\tdefaultCountry: PropTypes.string,\n\n\t/**\n\t * If specified, only these countries will be available for selection.\n\t *\n\t * Example:\n\t *\n\t * `[\"RU\", \"UA\", \"KZ\"]`\n\t */\n\tcountries: PropTypes.arrayOf(PropTypes.string),\n\n\t/**\n\t * Custom country `<select/>` option names.\n\t * Also some labels like \"ext\" and country `<select/>` `aria-label`.\n\t *\n\t * Example:\n\t *\n\t * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\n\t *\n\t * See the `locales` directory for examples.\n\t */\n\tlabels: labelsPropType.isRequired,\n\n\t/**\n\t * Country `<select/>` options are sorted by their labels.\n\t * The default sorting function uses `a.localeCompare(b, locales)`,\n\t * and, if that's not available, falls back to simple `a > b` / `a < b`.\n\t * Some languages, like Chinese, support multiple sorting variants\n\t * (called \"collations\"), and the user might prefer one or another.\n\t * Also, sometimes the Operating System language is not always\n\t * the preferred language for a person using a website or an application,\n\t * so there should be a way to specify custom locale.\n\t * This `locales` property mimicks the `locales` argument of `Intl` constructors,\n\t * and can be either a Unicode BCP 47 locale identifier or an array of such locale identifiers.\n\t * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\n\t */\n\tlocales: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.arrayOf(PropTypes.string)\n\t]),\n\n\t/*\n\t * Custom country `<select/>` options sorting function.\n\t * The default one uses `a.localeCompare(b)`, and,\n\t * if that's not available, falls back to simple `a > b`/`a < b`.\n\t * There have been requests to add custom sorter for cases\n\t * like Chinese language and \"pinyin\" (non-default) sorting order.\n\t * https://stackoverflow.com/questions/22907288/chinese-sorting-by-pinyin-in-javascript-with-localecompare\n\tcompareStrings: PropTypes.func,\n\t */\n\n\t/**\n\t * A URL template of a country flag, where\n\t * \"{XX}\" is a two-letter country code in upper case,\n\t * or where \"{xx}\" is a two-letter country code in lower case.\n\t * By default it points to `country-flag-icons` gitlab pages website.\n\t * I imagine someone might want to download those country flag icons\n\t * and host them on their own servers instead\n\t * (all flags are available in the `country-flag-icons` library).\n\t * There's a catch though: new countries may be added in future,\n\t * so when hosting country flag icons on your own server\n\t * one should check the `CHANGELOG.md` every time before updating this library,\n\t * otherwise there's a possibility that some new country flag would be missing.\n\t */\n\tflagUrl: PropTypes.string.isRequired,\n\n\t/**\n\t * Custom country flag icon components.\n\t * These flags will be used instead of the default ones.\n\t * The the \"Flags\" section of the readme for more info.\n\t *\n\t * The shape is an object where keys are country codes\n\t * and values are flag icon components.\n\t * Flag icon components receive the same properties\n\t * as `flagComponent` (see below).\n\t *\n\t * Example:\n\t *\n\t * `{ \"RU\": (props) => <img src=\"...\"/> }`\n\t *\n\t * Example:\n\t *\n\t * `import flags from 'country-flag-icons/react/3x2'`\n\t *\n\t * `import PhoneInput from 'react-phone-number-input'`\n\t *\n\t * `<PhoneInput flags={flags} .../>`\n\t */\n\tflags: PropTypes.objectOf(PropTypes.elementType),\n\n\t/**\n\t * Country flag icon component.\n\t *\n\t * Takes properties:\n\t *\n\t * * `country: string` — The country code.\n\t * * `countryName: string` — The country name.\n\t * * `flagUrl: string` — The `flagUrl` property (see above).\n\t * * `flags: object` — The `flags` property (see above).\n\t */\n\tflagComponent: PropTypes.elementType.isRequired,\n\n\t/**\n\t * Set to `false` to remove the \"International\" option from country `<select/>`.\n\t */\n\taddInternationalOption: PropTypes.bool.isRequired,\n\n\t/**\n\t * \"International\" icon component.\n\t * Should have the same aspect ratio.\n\t *\n\t * Receives properties:\n\t *\n\t * * `title: string` — \"International\" country option label.\n\t */\n\tinternationalIcon: PropTypes.elementType.isRequired,\n\n\t/**\n\t * Can be used to place some countries on top of the list of country `<select/>` options.\n\t *\n\t * * `\"XX\"` — inserts an option for \"XX\" country.\n\t * * `\"🌐\"` — inserts \"International\" option.\n\t * * `\"|\"` — inserts a separator.\n\t * * `\"...\"` — inserts options for the rest of the countries (can be omitted, in which case it will be automatically added at the end).\n\t *\n\t * Example:\n\t *\n\t * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\n\t */\n\tcountryOptionsOrder: PropTypes.arrayOf(PropTypes.string),\n\n\t/**\n\t * `<Phone/>` component CSS style object.\n\t */\n\tstyle: PropTypes.object,\n\n\t/**\n\t * `<Phone/>` component CSS class.\n\t */\n\tclassName: PropTypes.string,\n\n\t/**\n\t * Country `<select/>` component.\n\t *\n\t * Receives properties:\n\t *\n\t * * `name: string?` — HTML `name` attribute.\n\t * * `value: string?` — The currently selected country code.\n\t * * `onChange(value: string?)` — Updates the `value`.\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\n\t * * `options: object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value: string?, label: string }`.\n\t * * `iconComponent: PropTypes.elementType` — React component that renders a country icon: `<Icon country={value}/>`. If `country` is `undefined` then it renders an \"International\" icon.\n\t * * `disabled: boolean?` — HTML `disabled` attribute.\n\t * * `readOnly: boolean?` — HTML `readOnly` attribute.\n\t * * `tabIndex: (number|string)?` — HTML `tabIndex` attribute.\n\t * * `className: string` — CSS class name.\n\t */\n\tcountrySelectComponent: PropTypes.elementType.isRequired,\n\n\t/**\n\t * Country `<select/>` component props.\n\t * Along with the usual DOM properties such as `aria-label` and `tabIndex`,\n\t * some custom properties are supported, such as `arrowComponent` and `unicodeFlags`.\n\t */\n\tcountrySelectProps: PropTypes.object,\n\n\t/**\n\t * Phone number `<input/>` component.\n\t *\n\t * Receives properties:\n\t *\n\t * * `value: string` — The formatted `value`.\n\t * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\n\t * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\n\t *\n\t * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\n\t */\n\tinputComponent: PropTypes.elementType.isRequired,\n\n\t/**\n\t * Wrapping `<div/>` component.\n\t *\n\t * Receives properties:\n\t *\n\t * * `style: object` — A component CSS style object.\n\t * * `className: string` — Classes to attach to the component, typically changes when component focuses or blurs.\n\t */\n\tcontainerComponent: PropTypes.elementType.isRequired,\n\n\t/**\n\t * Phone number `<input/>` component props.\n\t */\n\tnumberInputProps: PropTypes.object,\n\n\t/**\n\t * When the user attempts to insert a digit somewhere in the middle of a phone number,\n\t * the caret position is moved right before the next available digit skipping\n\t * any punctuation in between. This is called \"smart\" caret positioning.\n\t * Another case would be the phone number format changing as a result of\n\t * the user inserting the digit somewhere in the middle, which would require\n\t * re-positioning the caret because all digit positions have changed.\n\t * This \"smart\" caret positioning feature can be turned off by passing\n\t * `smartCaret={false}` property: use it in case of any possible issues\n\t * with caret position during phone number input.\n\t */\n\t// Is `true` by default.\n\tsmartCaret: PropTypes.bool.isRequired,\n\n\t/**\n\t * Set to `true` to force \"international\" phone number format.\n\t * Set to `false` to force \"national\" phone number format.\n\t * By default it's `undefined` meaning that it doesn't enforce any phone number format.\n\t */\n\tinternational: PropTypes.bool,\n\n\t/**\n\t * If set to `true`, the phone number input will get trimmed\n\t * if it exceeds the maximum length for the country.\n\t */\n\tlimitMaxLength: PropTypes.bool.isRequired,\n\n\t/**\n\t * If set to `false`, and `international` is `true`, then\n\t * users won't be able to erase the \"country calling part\"\n\t * of a phone number in the `<input/>`.\n\t */\n\tcountryCallingCodeEditable: PropTypes.bool.isRequired,\n\n\t/**\n\t * `libphonenumber-js` metadata.\n\t *\n\t * Can be used to pass custom `libphonenumber-js` metadata\n\t * to reduce the overall bundle size for those who compile \"custom\" metadata.\n\t */\n\tmetadata: metadataPropType.isRequired,\n\n\t/**\n\t * Is called every time the selected country changes:\n\t * either programmatically or when user selects it manually from the list.\n\t */\n\t// People have been asking for a way to get the selected country.\n\t// @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\n\t// For some it's just a \"business requirement\".\n\t// I guess it's about gathering as much info on the user as a website can\n\t// without introducing any addional fields that would complicate the form\n\t// therefore reducing \"conversion\" (that's a marketing term).\n\t// Assuming that the phone number's country is the user's country\n\t// is not 100% correct but in most cases I guess it's valid.\n\tonCountryChange: PropTypes.func,\n\n\t/**\n\t * If set to `false`, will not focus the `<input/>` component\n\t * when the user selects a country from the list of countries.\n\t * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\n\t * Quote:\n\t * \"On input: Changing the setting of any user interface component\n\t *  does not automatically cause a change of context unless the user\n\t *  has been advised of the behaviour before using the component.\"\n\t */\n\tfocusInputOnCountrySelection: PropTypes.bool.isRequired\n}\n\nPhoneNumberInput.defaultProps = {\n\t/**\n\t * Remember (and autofill) the value as a phone number.\n\t */\n\tautoComplete: 'tel',\n\n\t/**\n\t * Country `<select/>` component.\n\t */\n\tcountrySelectComponent: CountrySelect,\n\n\t/**\n\t * Flag icon component.\n\t */\n\tflagComponent: Flag,\n\n\t/**\n\t * By default, uses icons from `country-flag-icons` gitlab pages website.\n\t */\n\t// Must be equal to `flagUrl` in `./CountryIcon.js`.\n\tflagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\n\n\t/**\n\t * Default \"International\" country `<select/>` option icon.\n\t */\n\tinternationalIcon: InternationalIcon,\n\n\t/**\n\t * Phone number `<input/>` component.\n\t */\n\tinputComponent: 'input',\n\n\t/**\n\t * Wrapping `<div/>` component.\n\t */\n\tcontainerComponent: 'div',\n\n\t/**\n\t * Some users requested a way to reset the component:\n\t * both number `<input/>` and country `<select/>`.\n\t * Whenever `reset` property changes both number `<input/>`\n\t * and country `<select/>` are reset.\n\t * It's not implemented as some instance `.reset()` method\n\t * because `ref` is forwarded to `<input/>`.\n\t * It's also not replaced with just resetting `country` on\n\t * external `value` reset, because a user could select a country\n\t * and then not input any `value`, and so the selected country\n\t * would be \"stuck\", if not using this `reset` property.\n\t */\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\n\treset: PropTypes.any,\n\n\t/**\n\t *\n\t */\n\n\t/**\n\t * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\n\t */\n\tsmartCaret: true,\n\n\t/**\n\t * Whether to add the \"International\" option\n\t * to the list of countries.\n\t */\n\taddInternationalOption: true,\n\n\t/**\n\t * If set to `true` the phone number input will get trimmed\n\t * if it exceeds the maximum length for the country.\n\t */\n\tlimitMaxLength: false,\n\n\t/**\n\t * If set to `false`, and `international` is `true`, then\n\t * users won't be able to erase the \"country calling part\"\n\t * of a phone number in the `<input/>`.\n\t */\n\tcountryCallingCodeEditable: true,\n\n\t/**\n\t * If set to `false`, will not focus the `<input/>` component\n\t * when the user selects a country from the list of countries.\n\t * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\n\t * Quote:\n\t * \"On input: Changing the setting of any user interface component\n\t *  does not automatically cause a change of context unless the user\n\t *  has been advised of the behaviour before using the component.\"\n\t */\n\tfocusInputOnCountrySelection: true\n}\n\nexport default PhoneNumberInput\n\nfunction areEqualArrays(a, b) {\n\tif (a.length !== b.length) {\n\t\treturn false\n\t}\n\tlet i = 0\n\twhile (i < a.length) {\n\t\tif (a[i] !== b[i]) {\n\t\t\treturn false\n\t\t}\n\t\ti++\n\t}\n\treturn true\n}\n"],"mappings":"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;AACA;EACC1E,OAAO,EAAEuE,qBAAS,CAACE,IAAI;EAEvB;AACD;AACA;AACA;EACCxE,MAAM,EAAEsE,qBAAS,CAACE,IAAI;EAEtB;AACD;AACA;AACA;EACClC,QAAQ,EAAEgC,qBAAS,CAACI,IAAI;EAExB;AACD;AACA;AACA;EACCnC,QAAQ,EAAE+B,qBAAS,CAACI,IAAI;EAExB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC;EACAlC,YAAY,EAAE8B,qBAAS,CAACC,MAAM,CAACE,UAAU;EAEzC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC;EACAlE,kBAAkB,EAAE+D,qBAAS,CAACK,KAAK,CAAC,CAAC,UAAU,CAAC,CAAC;EAEjD;EACA;EACArE,gCAAgC,EAAEgE,qBAAS,CAACI,IAAI;EAEhD;AACD;AACA;AACA;AACA;AACA;EACC;EACA1F,cAAc,EAAEsF,qBAAS,CAACC,MAAM;EAEhC;AACD;AACA;AACA;AACA;AACA;AACA;EACCnF,SAAS,EAAEkF,qBAAS,CAACM,OAAO,CAACN,qBAAS,CAACC,MAAM,CAAC;EAE9C;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACClE,MAAM,EAAEwE,iBAAc,CAACJ,UAAU;EAEjC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCjD,OAAO,EAAE8C,qBAAS,CAACQ,SAAS,CAAC,CAC5BR,qBAAS,CAACC,MAAM,EAChBD,qBAAS,CAACM,OAAO,CAACN,qBAAS,CAACC,MAAM,CAAC,CACnC,CAAC;EAEF;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACClB,OAAO,EAAEiB,qBAAS,CAACC,MAAM,CAACE,UAAU;EAEpC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCtB,KAAK,EAAEmB,qBAAS,CAACS,QAAQ,CAACT,qBAAS,CAACU,WAAW,CAAC;EAEhD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC5B,aAAa,EAAEkB,qBAAS,CAACU,WAAW,CAACP,UAAU;EAE/C;AACD;AACA;EACCxF,sBAAsB,EAAEqF,qBAAS,CAACI,IAAI,CAACD,UAAU;EAEjD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCnB,iBAAiB,EAAEgB,qBAAS,CAACU,WAAW,CAACP,UAAU;EAEnD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACClD,mBAAmB,EAAE+C,qBAAS,CAACM,OAAO,CAACN,qBAAS,CAACC,MAAM,CAAC;EAExD;AACD;AACA;EACC9B,KAAK,EAAE6B,qBAAS,CAACW,MAAM;EAEvB;AACD;AACA;EACCvC,SAAS,EAAE4B,qBAAS,CAACC,MAAM;EAE3B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCxB,sBAAsB,EAAEuB,qBAAS,CAACU,WAAW,CAACP,UAAU;EAExD;AACD;AACA;AACA;AACA;EACCvE,kBAAkB,EAAEoE,qBAAS,CAACW,MAAM;EAEpC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCtC,cAAc,EAAE2B,qBAAS,CAACU,WAAW,CAACP,UAAU;EAEhD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCxB,kBAAkB,EAAEqB,qBAAS,CAACU,WAAW,CAACP,UAAU;EAEpD;AACD;AACA;EACC7B,gBAAgB,EAAE0B,qBAAS,CAACW,MAAM;EAElC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC;EACApC,UAAU,EAAEyB,qBAAS,CAACI,IAAI,CAACD,UAAU;EAErC;AACD;AACA;AACA;AACA;EACC1G,aAAa,EAAEuG,qBAAS,CAACI,IAAI;EAE7B;AACD;AACA;AACA;EACCxF,cAAc,EAAEoF,qBAAS,CAACI,IAAI,CAACD,UAAU;EAEzC;AACD;AACA;AACA;AACA;EACCtF,0BAA0B,EAAEmF,qBAAS,CAACI,IAAI,CAACD,UAAU;EAErD;AACD;AACA;AACA;AACA;AACA;EACC7G,QAAQ,EAAEsH,mBAAgB,CAACT,UAAU;EAErC;AACD;AACA;AACA;EACC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAtD,eAAe,EAAEmD,qBAAS,CAACE,IAAI;EAE/B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCvG,4BAA4B,EAAEqG,qBAAS,CAACI,IAAI,CAACD;AAC9C,CAAC;AAEDN,gBAAgB,CAACgB,YAAY,GAAG;EAC/B;AACD;AACA;EACC3C,YAAY,EAAE,KAAK;EAEnB;AACD;AACA;EACCO,sBAAsB,EAAEqC,oCAAa;EAErC;AACD;AACA;EACChC,aAAa,EAAEiC,gBAAI;EAEnB;AACD;AACA;EACC;EACAhC,OAAO,EAAE,sEAAsE;EAE/E;AACD;AACA;EACCC,iBAAiB,EAAEgC,6BAAiB;EAEpC;AACD;AACA;EACC3C,cAAc,EAAE,OAAO;EAEvB;AACD;AACA;EACCM,kBAAkB,EAAE,KAAK;EAEzB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC;EACAM,KAAK,EAAEe,qBAAS,CAACiB,GAAG;EAEpB;AACD;AACA;;EAEC;AACD;AACA;EACC1C,UAAU,EAAE,IAAI;EAEhB;AACD;AACA;AACA;EACC5D,sBAAsB,EAAE,IAAI;EAE5B;AACD;AACA;AACA;EACCC,cAAc,EAAE,KAAK;EAErB;AACD;AACA;AACA;AACA;EACCC,0BAA0B,EAAE,IAAI;EAEhC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACClB,4BAA4B,EAAE;AAC/B,CAAC;AAAA,eAEckG,gBAAgB;AAAA;AAE/B,SAASjC,cAAc,CAACsD,CAAC,EAAEC,CAAC,EAAE;EAC7B,IAAID,CAAC,CAACE,MAAM,KAAKD,CAAC,CAACC,MAAM,EAAE;IAC1B,OAAO,KAAK;EACb;EACA,IAAIC,CAAC,GAAG,CAAC;EACT,OAAOA,CAAC,GAAGH,CAAC,CAACE,MAAM,EAAE;IACpB,IAAIF,CAAC,CAACG,CAAC,CAAC,KAAKF,CAAC,CAACE,CAAC,CAAC,EAAE;MAClB,OAAO,KAAK;IACb;IACAA,CAAC,EAAE;EACJ;EACA,OAAO,IAAI;AACZ"}