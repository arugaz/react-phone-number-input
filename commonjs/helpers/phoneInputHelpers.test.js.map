{"version":3,"file":"phoneInputHelpers.test.js","names":["describe","it","getPreSelectedCountry","value","phoneNumber","countries","getAnyCountry","required","metadata","should","equal","expect","to","be","undefined","defaultCountry","country","phone","defaultLabels","getCountrySelectOptions","countryNames","deep","label","addInternationalOption","ZZ","compareStrings","a","b","parsePhoneNumber","nationalNumber","generateNationalNumberDigits","getPhoneDigitsForNewCountry","prevCountry","newCountry","useNationalFormat","e164","trimNumber","getCountryForPartialE164Number","getCountryFromPossiblyIncompleteInternationalPhoneNumber","stripCountryCallingCode","getNationalSignificantNumberDigits","couldNumberBelongToCountry","onPhoneDigitsChange","phoneDigits","countryRequired","prevPhoneDigits","limitMaxLength","international","countryCallingCodeEditable","onChange","getInitialPhoneDigits","number"],"sources":["../../source/helpers/phoneInputHelpers.test.js"],"sourcesContent":["import {\n\tgetPreSelectedCountry,\n\tgetCountrySelectOptions,\n\tparsePhoneNumber,\n\tgenerateNationalNumberDigits,\n\tgetPhoneDigitsForNewCountry,\n\te164,\n\tgetCountryForPartialE164Number,\n\tonPhoneDigitsChange,\n\tgetInitialPhoneDigits,\n\t// Private functions\n\tgetCountryFromPossiblyIncompleteInternationalPhoneNumber,\n\tcompareStrings,\n\tstripCountryCallingCode,\n\tgetNationalSignificantNumberDigits,\n\tcouldNumberBelongToCountry,\n\ttrimNumber\n} from './phoneInputHelpers.js'\n\nimport metadata from 'libphonenumber-js/min/metadata'\n\ndescribe('phoneInputHelpers', () => {\n\tit('should get pre-selected country', () => {\n\t\t// Can't return \"International\". Return the first country available.\n\t\tgetPreSelectedCountry({\n\t\t\tvalue: '+11111111111',\n\t\t\tphoneNumber: {},\n\t\t\tcountries: ['US', 'RU'],\n\t\t\tgetAnyCountry: () => 'US',\n\t\t\trequired: true,\n\t\t\tmetadata\n\t\t}).should.equal('US')\n\n\t\t// Can return \"International\".\n\t\t// Country can't be derived from the phone number.\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/378\n\t\texpect(getPreSelectedCountry({\n\t\t\tvalue: '+11111111111',\n\t\t\tphoneNumber: {},\n\t\t\tcountries: ['US', 'RU'],\n\t\t\tgetAnyCountry: () => 'US',\n\t\t\trequired: false,\n\t\t\tmetadata\n\t\t})).to.be.undefined\n\n\t\t// Can return \"International\".\n\t\t// Country can't be derived from the phone number.\n\t\t// Has `defaultCountry`.\n\t\t// Has `value`.\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/378\n\t\texpect(getPreSelectedCountry({\n\t\t\tvalue: '+11111111111',\n\t\t\tphoneNumber: {},\n\t\t\tdefaultCountry: 'RU',\n\t\t\tcountries: ['RU', 'FR'],\n\t\t\trequired: false,\n\t\t\tmetadata\n\t\t})).to.be.undefined\n\n\t\t// Can return \"International\".\n\t\t// Country can be derived from the phone number.\n\t\t// Has `defaultCountry`.\n\t\t// Has a valid partial `value`.\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/378\n\t\texpect(getPreSelectedCountry({\n\t\t\tvalue: '+7800',\n\t\t\tdefaultCountry: 'RU',\n\t\t\tcountries: ['RU', 'FR'],\n\t\t\trequired: false,\n\t\t\tmetadata\n\t\t})).to.equal('RU')\n\n\t\t// Derive country from the phone number.\n\t\tgetPreSelectedCountry({\n\t\t\tvalue: '+78005553535',\n\t\t\tphoneNumber: { country: 'RU', phone: '8005553535' },\n\t\t\tcountries: ['US', 'RU'],\n\t\t\tgetAnyCountry: () => 'US',\n\t\t\trequired: true,\n\t\t\tmetadata\n\t\t}).should.equal('RU')\n\n\t\t// Country derived from the phone number overrides the supplied one.\n\t\tgetPreSelectedCountry({\n\t\t\tvalue: '+78005553535',\n\t\t\tphoneNumber: { country: 'RU', phone: '8005553535' },\n\t\t\tdefaultCountry: 'US',\n\t\t\tcountries: ['US', 'RU'],\n\t\t\trequired: true,\n\t\t\tmetadata\n\t\t}).should.equal('RU')\n\n\t\t// Only pre-select a country if it's in the available `countries` list.\n\t\tgetPreSelectedCountry({\n\t\t\tvalue: '+78005553535',\n\t\t\tphoneNumber: { country: 'RU', phone: '8005553535' },\n\t\t\tcountries: ['US', 'DE'],\n\t\t\tgetAnyCountry: () => 'US',\n\t\t\trequired: true,\n\t\t\tmetadata\n\t\t}).should.equal('US')\n\n\t\texpect(getPreSelectedCountry({\n\t\t\tvalue: '+78005553535',\n\t\t\tphoneNumber: { country: 'RU', phone: '8005553535' },\n\t\t\tdefaultCountry: 'US',\n\t\t\tcountries: ['US', 'DE'],\n\t\t\trequired: false,\n\t\t\tmetadata\n\t\t})).to.be.undefined\n\t})\n\n\tit('should generate country select options', () => {\n\t\tconst defaultLabels = {\n\t\t\t'RU': 'Russia (Россия)',\n\t\t\t'US': 'United States',\n\t\t\t'ZZ': 'International'\n\t\t}\n\n\t\t// Without custom country names.\n\t\tgetCountrySelectOptions({\n\t\t\tcountries: ['US', 'RU'],\n\t\t\tcountryNames: defaultLabels\n\t\t}).should.deep.equal([{\n\t\t\tvalue: 'RU',\n\t\t\tlabel: 'Russia (Россия)'\n\t\t}, {\n\t\t\tvalue: 'US',\n\t\t\tlabel: 'United States'\n\t\t}])\n\n\t\t// With custom country names.\n\t\tgetCountrySelectOptions({\n\t\t\tcountries: ['US', 'RU'],\n\t\t\tcountryNames: { ...defaultLabels, 'RU': 'Russia' }\n\t\t}).should.deep.equal([{\n\t\t\tvalue: 'RU',\n\t\t\tlabel: 'Russia'\n\t\t}, {\n\t\t\tvalue: 'US',\n\t\t\tlabel: 'United States'\n\t\t}])\n\n\t\t// Should substitute missing country names with country codes.\n\t\tgetCountrySelectOptions({\n\t\t\tcountries: ['US', 'RU'],\n\t\t\tcountryNames: { ...defaultLabels, 'RU': undefined }\n\t\t}).should.deep.equal([{\n\t\t\tvalue: 'RU',\n\t\t\tlabel: 'RU'\n\t\t}, {\n\t\t\tvalue: 'US',\n\t\t\tlabel: 'United States'\n\t\t}])\n\n\t\t// With \"International\" (without custom country names).\n\t\tgetCountrySelectOptions({\n\t\t\tcountries: ['US', 'RU'],\n\t\t\tcountryNames: defaultLabels,\n\t\t\taddInternationalOption: true\n\t\t}).should.deep.equal([{\n\t\t\tlabel: 'International'\n\t\t}, {\n\t\t\tvalue: 'RU',\n\t\t\tlabel: 'Russia (Россия)'\n\t\t}, {\n\t\t\tvalue: 'US',\n\t\t\tlabel: 'United States'\n\t\t}])\n\n\t\t// With \"International\" (with custom country names).\n\t\tgetCountrySelectOptions({\n\t\t\tcountries: ['US', 'RU'],\n\t\t\tcountryNames: { ...defaultLabels, 'RU': 'Russia', ZZ: 'Intl' },\n\t\t\taddInternationalOption: true\n\t\t}).should.deep.equal([{\n\t\t\tlabel: 'Intl'\n\t\t}, {\n\t\t\tvalue: 'RU',\n\t\t\tlabel: 'Russia'\n\t\t}, {\n\t\t\tvalue: 'US',\n\t\t\tlabel: 'United States'\n\t\t}])\n\t})\n\n\tit('should generate country select options (custom `compareStrings`)', () => {\n\t\tconst defaultLabels = {\n\t\t\t'RU': 'Russia (Россия)',\n\t\t\t'US': 'United States',\n\t\t\t'ZZ': 'International'\n\t\t}\n\n\t\t// Without custom country names.\n\t\tgetCountrySelectOptions({\n\t\t\tcountries: ['US', 'RU'],\n\t\t\tcountryNames: defaultLabels,\n\t\t\t// Reverse order.\n\t\t\tcompareStrings: (a, b) => a < b ? 1 : (a > b ? -1 : 0)\n\t\t}).should.deep.equal([{\n\t\t\tvalue: 'US',\n\t\t\tlabel: 'United States'\n\t\t}, {\n\t\t\tvalue: 'RU',\n\t\t\tlabel: 'Russia (Россия)'\n\t\t}])\n\t})\n\n\t// it('should generate country select options (Chinese locale)', () => {\n\t// \t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/20\n\t//\n\t// \tconst defaultLabels = {\n\t// \t\t'RU': 'Russia (Россия)',\n\t// \t\t'US': 'United States',\n\t// \t\t'ZZ': 'International'\n\t// \t}\n\t//\n\t// \t// Without custom country names.\n\t// \tgetCountrySelectOptions({\n\t// \t\tcountries: ['US', 'RU'],\n\t// \t\tcountryNames: defaultLabels,\n\t// \t\tcompareStringsLocales: 'zh-CN-u-co-pinyin'\n\t// \t}).should.deep.equal([{\n\t// \t\tvalue: 'US',\n\t// \t\tlabel: 'United States'\n\t// \t}, {\n\t// \t\tvalue: 'RU',\n\t// \t\tlabel: 'Russia (Россия)'\n\t// \t}])\n\t// })\n\n\tit('should parse phone numbers', () => {\n\t\tconst phoneNumber = parsePhoneNumber('+78005553535', metadata)\n\t\tphoneNumber.country.should.equal('RU')\n\t\tphoneNumber.nationalNumber.should.equal('8005553535')\n\n\t\t// No `value` passed.\n\t\texpect(parsePhoneNumber(null, metadata)).to.be.undefined\n\t})\n\n\tit('should generate national number digits', () => {\n\t\tconst phoneNumber = parsePhoneNumber('+33509758351', metadata)\n\t\tgenerateNationalNumberDigits(phoneNumber).should.equal('0509758351')\n\t})\n\n\tit('should migrate parsed input for new country', () => {\n\t\t// Country didn't change. Return the same digits.\n\t\tgetPhoneDigitsForNewCountry('', {\n\t\t\tprevCountry: 'US',\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata,\n\t\t\tuseNationalFormat: true\n\t\t}).should.equal('')\n\n\t\t// Country didn't change. Return the same digits.\n\t\tgetPhoneDigitsForNewCountry('123', {\n\t\t\tprevCountry: 'US',\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata,\n\t\t\tuseNationalFormat: true\n\t\t}).should.equal('123')\n\n\t\t// Country didn't change. Return the same digits.\n\t\tgetPhoneDigitsForNewCountry('+123', {\n\t\t\tprevCountry: 'US',\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata\n\t\t}).should.equal('+123')\n\n\t\t// No input. Returns `undefined`.\n\t\tgetPhoneDigitsForNewCountry('', {\n\t\t\tprevCountry: 'RU',\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata,\n\t\t\tuseNationalFormat: true\n\t\t}).should.equal('')\n\n\t\t// Switching from \"International\" to a country\n\t\t// to which the phone number already belongs to.\n\t\t// No changes. Returns `undefined`.\n\t\tgetPhoneDigitsForNewCountry('+18005553535', {\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata\n\t\t}).should.equal('+18005553535')\n\n\t\t// Switching between countries. National number. No changes.\n\t\tgetPhoneDigitsForNewCountry('8005553535', {\n\t\t\tprevCountry: 'RU',\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata\n\t\t}).should.equal('8005553535')\n\n\t\t// Switching from \"International\" to a country. Calling code not matches. Resets parsed input.\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata\n\t\t}).should.equal('+1')\n\n\t\t// Switching from \"International\" to a country. Calling code matches. Doesn't reset parsed input.\n\t\tgetPhoneDigitsForNewCountry('+12223333333', {\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata\n\t\t}).should.equal('+12223333333')\n\n\t\t// Switching countries. International number. Calling code doesn't match.\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\n\t\t\tprevCountry: 'RU',\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata\n\t\t}).should.equal('+1')\n\n\t\t// Switching countries. International number. Calling code matches.\n\t\tgetPhoneDigitsForNewCountry('+18005553535', {\n\t\t\tprevCountry: 'CA',\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata\n\t\t}).should.equal('+18005553535')\n\n\t\t// Switching countries. International number.\n\t\t// Country calling code is longer than the amount of digits available.\n\t\tgetPhoneDigitsForNewCountry('+99', {\n\t\t\tprevCountry: 'KG',\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata\n\t\t}).should.equal('+1')\n\n\t\t// Switching countries. International number. No such country code.\n\t\tgetPhoneDigitsForNewCountry('+99', {\n\t\t\tprevCountry: 'KG',\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata\n\t\t}).should.equal('+1')\n\n\t\t// Switching to \"International\". National number.\n\t\tgetPhoneDigitsForNewCountry('8800555', {\n\t\t\tprevCountry: 'RU',\n\t\t\tmetadata\n\t\t}).should.equal('+7800555')\n\n\t\t// Switching to \"International\". No national (significant) number digits entered.\n\t\tgetPhoneDigitsForNewCountry('8', {\n\t\t\tprevCountry: 'RU',\n\t\t\tmetadata\n\t\t// }).should.equal('')\n\t\t}).should.equal('+7')\n\n\t\t// Switching to \"International\". International number. No changes.\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\n\t\t\tprevCountry: 'RU',\n\t\t\tmetadata\n\t\t}).should.equal('+78005553535')\n\n\t\t// Prefer national format. Country matches. Leaves the \"national (significant) number\".\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\n\t\t\tnewCountry: 'RU',\n\t\t\tmetadata,\n\t\t\tuseNationalFormat: true\n\t\t}).should.equal('8005553535')\n\n\t\t// Prefer national format. Country doesn't match, but country calling code does. Leaves the \"national (significant) number\".\n\t\tgetPhoneDigitsForNewCountry('+12133734253', {\n\t\t\tnewCountry: 'CA',\n\t\t\tmetadata,\n\t\t\tuseNationalFormat: true\n\t\t}).should.equal('2133734253')\n\n\t\t// Prefer national format. Country doesn't match, neither does country calling code. Clears the value.\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata,\n\t\t\tuseNationalFormat: true\n\t\t}).should.equal('')\n\n\t\t// Force international format. `phoneDigits` is empty. From no country to a country.\n\t\tgetPhoneDigitsForNewCountry(null, {\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata,\n\t\t\tuseNationalFormat: false\n\t\t}).should.equal('+1')\n\n\t\t// Force international format. `phoneDigits` is not empty. From a country to a country with the same calling code.\n\t\tgetPhoneDigitsForNewCountry('+1222', {\n\t\t\tprevCountry: 'CA',\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata\n\t\t}).should.equal('+1222')\n\n\t\t// Force international format. `phoneDigits` is not empty. From a country to a country with another calling code.\n\t\tgetPhoneDigitsForNewCountry('+1222', {\n\t\t\tprevCountry: 'CA',\n\t\t\tnewCountry: 'RU',\n\t\t\tmetadata\n\t\t}).should.equal('+7')\n\n\t\t// Force international format. `phoneDigits` is not empty. From no country to a country.\n\t\tgetPhoneDigitsForNewCountry('+1222', {\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata\n\t\t}).should.equal('+1222')\n\t})\n\n\tit('should format phone number in e164', () =>\n\t{\n\t\t// No number.\n\t\texpect(e164()).to.be.undefined\n\n\t\t// International number. Just a '+' sign.\n\t\texpect(e164('+')).to.be.undefined\n\n\t\t// International number.\n\t\te164('+7800', null, metadata).should.equal('+7800')\n\n\t\t// National number. Without country.\n\t\texpect(e164('8800', null, metadata)).to.be.undefined\n\n\t\t// National number. With country. Just national prefix.\n\t\t// expect(e164('8', 'RU', metadata)).to.be.undefined\n\t\te164('8', 'RU', metadata).should.equal('+7')\n\n\t\t// National number. With country.\n\t\te164('8800', 'RU', metadata).should.equal('+7800')\n\t})\n\n\tit('should trim the phone number if it exceeds the maximum length', () =>\n\t{\n\t\t// // No number.\n\t\t// expect(trimNumber()).to.be.undefined\n\n\t\t// Empty number.\n\t\texpect(trimNumber('', 'RU', metadata)).to.equal('')\n\n\t\t// // International number. Without country.\n\t\t// trimNumber('+780055535351').should.equal('+780055535351')\n\n\t\t// // National number. Without country.\n\t\t// trimNumber('880055535351', null).should.equal('880055535351')\n\n\t\t// National number. Doesn't exceed the maximum length.\n\t\ttrimNumber('2135553535', 'US', metadata).should.equal('2135553535')\n\t\t// National number. Exceeds the maximum length.\n\t\ttrimNumber('21355535351', 'US', metadata).should.equal('2135553535')\n\n\t\t// International number. Doesn't exceed the maximum length.\n\t\ttrimNumber('+12135553535', 'US', metadata).should.equal('+12135553535')\n\t\t// International number. Exceeds the maximum length.\n\t\ttrimNumber('+121355535351', 'US', metadata).should.equal('+12135553535')\n\t})\n\n\tit('should get country for partial E.164 number', () =>\n\t{\n\t\t// Just a '+' sign.\n\t\tgetCountryForPartialE164Number('+', {\n\t\t\tcountry: 'RU',\n\t\t\tcountries: ['US', 'RU'],\n\t\t\tmetadata\n\t\t}).should.equal('RU')\n\n\t\texpect(getCountryForPartialE164Number('+', {\n\t\t\tcountries: ['US', 'RU'],\n\t\t\tmetadata\n\t\t})).to.be.undefined\n\n\t\t// A country can be derived.\n\t\tgetCountryForPartialE164Number('+78005553535', {\n\t\t\tcountries: ['US', 'RU'],\n\t\t\tmetadata\n\t\t}).should.equal('RU')\n\n\t\t// A country can't be derived yet.\n\t\t// And the currently selected country doesn't fit the number.\n\t\texpect(getCountryForPartialE164Number('+7', {\n\t\t\tcountry: 'FR',\n\t\t\tcountries: ['FR', 'RU'],\n\t\t\tmetadata\n\t\t})).to.be.undefined\n\n\t\texpect(getCountryForPartialE164Number('+12', {\n\t\t\tcountry: 'FR',\n\t\t\tcountries: ['FR', 'US'],\n\t\t\tmetadata\n\t\t})).to.be.undefined\n\n\t\t// A country can't be derived yet.\n\t\t// And the currently selected country doesn't fit the number.\n\t\t// Bit \"International\" option is not available.\n\t\tgetCountryForPartialE164Number('+7', {\n\t\t\tcountry: 'FR',\n\t\t\tcountries: ['FR', 'RU'],\n\t\t\trequired: true,\n\t\t\tmetadata\n\t\t}).should.equal('FR')\n\n\t\tgetCountryForPartialE164Number('+12', {\n\t\t\tcountry: 'FR',\n\t\t\tcountries: ['FR', 'US'],\n\t\t\trequired: true,\n\t\t\tmetadata\n\t\t}).should.equal('FR')\n\t})\n\n\tit('should get country from possibly incomplete international phone number', () =>\n\t{\n\t\t// // `001` country calling code.\n\t\t// // Non-geographic numbering plan.\n\t\t// expect(getCountryFromPossiblyIncompleteInternationalPhoneNumber('+800', metadata)).to.be.undefined\n\n\t\t// Country can be derived.\n\t\tgetCountryFromPossiblyIncompleteInternationalPhoneNumber('+33', metadata).should.equal('FR')\n\n\t\t// Country can't be derived yet.\n\t\texpect(getCountryFromPossiblyIncompleteInternationalPhoneNumber('+12', metadata)).to.be.undefined\n\t})\n\n\tit('should compare strings', () =>\n\t{\n\t\tcompareStrings('aa', 'ab').should.equal(-1)\n\t\tcompareStrings('aa', 'aa').should.equal(0)\n\t\tcompareStrings('aac', 'aab').should.equal(1)\n\t})\n\n\tit('should strip country calling code from a number', () =>\n\t{\n\t\t// Number is longer than country calling code prefix.\n\t\tstripCountryCallingCode('+7800', 'RU', metadata).should.equal('800')\n\n\t\t// Number is shorter than (or equal to) country calling code prefix.\n\t\tstripCountryCallingCode('+3', 'FR', metadata).should.equal('')\n\t\tstripCountryCallingCode('+7', 'FR', metadata).should.equal('')\n\n\t\t// `country` doesn't fit the actual `number`.\n\t\t// Iterates through all available country calling codes.\n\t\tstripCountryCallingCode('+7800', 'FR', metadata).should.equal('800')\n\n\t\t// No `country`.\n\t\t// And the calling code doesn't belong to any country.\n\t\tstripCountryCallingCode('+999', null, metadata).should.equal('')\n\t})\n\n\tit('should get national significant number part', () =>\n\t{\n\t\t// International number.\n\t\tgetNationalSignificantNumberDigits('+7800555', null, metadata).should.equal('800555')\n\n\t\t// International number.\n\t\t// No national (significant) number digits.\n\t\texpect(getNationalSignificantNumberDigits('+', null, metadata)).to.be.undefined\n\t\texpect(getNationalSignificantNumberDigits('+7', null, metadata)).to.be.undefined\n\n\t\t// National number.\n\t\tgetNationalSignificantNumberDigits('8800555', 'RU', metadata).should.equal('800555')\n\n\t\t// National number.\n\t\t// No national (significant) number digits.\n\t\texpect(getNationalSignificantNumberDigits('8', 'RU', metadata)).to.be.undefined\n\t\texpect(getNationalSignificantNumberDigits('', 'RU', metadata)).to.be.undefined\n\t})\n\n\tit('should determine of a number could belong to a country', () =>\n\t{\n\t\t// Matching.\n\t\tcouldNumberBelongToCountry('+7800', 'RU', metadata).should.equal(true)\n\n\t\t// First digit already not matching.\n\t\tcouldNumberBelongToCountry('+7800', 'FR', metadata).should.equal(false)\n\n\t\t// First digit matching, second - not matching.\n\t\tcouldNumberBelongToCountry('+33', 'AM', metadata).should.equal(false)\n\n\t\t// Number is shorter than country calling code.\n\t\tcouldNumberBelongToCountry('+99', 'KG', metadata).should.equal(true)\n\t})\n\n\tit('should handle phone digits change (should choose new \"value\" based on phone digits)', () => {\n\t\tonPhoneDigitsChange('+', {\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+',\n\t\t\tcountry: undefined,\n\t\t\tvalue: undefined\n\t\t})\n\n\t\tonPhoneDigitsChange('+', {\n\t\t\tmetadata,\n\t\t\tcountryRequired: true,\n\t\t\tgetAnyCountry: () => 'US'\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+',\n\t\t\tcountry: 'US',\n\t\t\tvalue: undefined\n\t\t})\n\n\t\tonPhoneDigitsChange('+7', {\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+7',\n\t\t\tcountry: undefined,\n\t\t\tvalue: '+7'\n\t\t})\n\n\t\tonPhoneDigitsChange('+7', {\n\t\t\tmetadata,\n\t\t\tcountry: 'RU'\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+7',\n\t\t\tcountry: 'RU',\n\t\t\tvalue: undefined\n\t\t})\n\n\t\tonPhoneDigitsChange('+78', {\n\t\t\tmetadata,\n\t\t\tcountry: 'RU'\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+78',\n\t\t\tcountry: 'RU',\n\t\t\tvalue: '+78'\n\t\t})\n\t})\n\n\tit('should handle phone digits change', () => {\n\t\tonPhoneDigitsChange(undefined, {\n\t\t\tcountry: 'RU',\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: undefined,\n\t\t\tcountry: 'RU',\n\t\t\tvalue: undefined\n\t\t})\n\n\t\tonPhoneDigitsChange('', {\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '',\n\t\t\tcountry: undefined,\n\t\t\tvalue: undefined\n\t\t})\n\n\t\tonPhoneDigitsChange('1213', {\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+1213',\n\t\t\tcountry: undefined,\n\t\t\tvalue: '+1213'\n\t\t})\n\n\t\tonPhoneDigitsChange('+1213', {\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+1213',\n\t\t\tcountry: undefined,\n\t\t\tvalue: '+1213'\n\t\t})\n\n\t\tonPhoneDigitsChange('213', {\n\t\t\tcountry: 'US',\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '213',\n\t\t\tcountry: 'US',\n\t\t\tvalue: '+1213'\n\t\t})\n\n\t\tonPhoneDigitsChange('+78005553535', {\n\t\t\tcountry: 'US',\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+78005553535',\n\t\t\tcountry: 'RU',\n\t\t\tvalue: '+78005553535'\n\t\t})\n\n\t\t// Won't reset an already selected country.\n\n\t\tonPhoneDigitsChange('+15555555555', {\n\t\t\tcountry: 'US',\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+15555555555',\n\t\t\tcountry: 'US',\n\t\t\tvalue: '+15555555555'\n\t\t})\n\n\t\t// Should reset the country if it has likely been automatically\n\t\t// selected based on international phone number input\n\t\t// and the user decides to erase all input.\n\t\tonPhoneDigitsChange('', {\n\t\t\tprevPhoneDigits: '+78005553535',\n\t\t\tcountry: 'RU',\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '',\n\t\t\tcountry: undefined,\n\t\t\tvalue: undefined\n\t\t})\n\n\t\t// Should reset the country if it has likely been automatically\n\t\t// selected based on international phone number input\n\t\t// and the user decides to erase all input.\n\t\t// Should reset to default country.\n\t\tonPhoneDigitsChange('', {\n\t\t\tprevPhoneDigits: '+78005553535',\n\t\t\tcountry: 'RU',\n\t\t\tdefaultCountry: 'US',\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '',\n\t\t\tcountry: 'US',\n\t\t\tvalue: undefined\n\t\t})\n\n\t\t// Should reset the country if it has likely been automatically\n\t\t// selected based on international phone number input\n\t\t// and the user decides to erase all input up to the `+` sign.\n\t\tonPhoneDigitsChange('+', {\n\t\t\tprevPhoneDigits: '+78005553535',\n\t\t\tcountry: 'RU',\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+',\n\t\t\tcountry: undefined,\n\t\t\tvalue: undefined\n\t\t})\n\t})\n\n\tit('should handle phone digits change (limitMaxLength: true)', () => {\n\t\tonPhoneDigitsChange('21337342530',{\n\t\t\tcountry: 'US',\n\t\t\tlimitMaxLength: true,\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '2133734253',\n\t\t\tcountry: 'US',\n\t\t\tvalue: '+12133734253'\n\t\t})\n\n\t\tonPhoneDigitsChange('+121337342530', {\n\t\t\tcountry: 'US',\n\t\t\tlimitMaxLength: true,\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+12133734253',\n\t\t\tcountry: 'US',\n\t\t\tvalue: '+12133734253'\n\t\t})\n\n\t\t// This case is intentionally ignored to simplify the code.\n\t\tonPhoneDigitsChange('+121337342530', {\n\t\t\tlimitMaxLength: true,\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\t// phoneDigits: '+12133734253',\n\t\t\t// country: 'US',\n\t\t\t// value: '+12133734253'\n\t\t\tphoneDigits: '+121337342530',\n\t\t\tcountry: undefined,\n\t\t\tvalue: '+121337342530'\n\t\t})\n\t})\n\n\tit('should handle phone digits change (`international: true`)', () => {\n\t\t// Shouldn't set `country` to `defaultCountry`\n\t\t// when erasing parsed input starting with a `+`\n\t\t// when `international` is `true`.\n\t\tonPhoneDigitsChange('', {\n\t\t\tprevPhoneDigits: '+78005553535',\n\t\t\tcountry: 'RU',\n\t\t\tdefaultCountry: 'US',\n\t\t\tinternational: true,\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '',\n\t\t\tcountry: undefined,\n\t\t\tvalue: undefined\n\t\t})\n\n\t\t// Should support forcing international phone number input format.\n\t\tonPhoneDigitsChange('2', {\n\t\t\tprevPhoneDigits: '+78005553535',\n\t\t\tcountry: 'RU',\n\t\t\tinternational: true,\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+2',\n\t\t\tcountry: undefined,\n\t\t\tvalue: '+2'\n\t\t})\n\t})\n\n\tit('should handle phone digits change (`international: true` and `countryCallingCodeEditable: false`) (reset incompatible international input)', () => {\n\t\tonPhoneDigitsChange('+1', {\n\t\t\tprevPhoneDigits: '+78005553535',\n\t\t\tcountry: 'RU',\n\t\t\tinternational: true,\n\t\t\tcountryCallingCodeEditable: false,\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+7',\n\t\t\tcountry: 'RU',\n\t\t\tvalue: undefined\n\t\t})\n\t})\n\n\tit('should handle phone digits change (`international: true` and `countryCallingCodeEditable: false`) (append national input)', () => {\n\t\tonPhoneDigitsChange('8', {\n\t\t\tprevPhoneDigits: '+78005553535',\n\t\t\tcountry: 'RU',\n\t\t\tinternational: true,\n\t\t\tcountryCallingCodeEditable: false,\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+78',\n\t\t\tcountry: 'RU',\n\t\t\tvalue: '+78'\n\t\t})\n\t})\n\n\tit('should handle phone digits change (`international: true` and `countryCallingCodeEditable: false`) (compatible input)', () => {\n\t\tonPhoneDigitsChange('+7', {\n\t\t\tprevPhoneDigits: '+78005553535',\n\t\t\tcountry: 'RU',\n\t\t\tinternational: true,\n\t\t\tcountryCallingCodeEditable: false,\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+7',\n\t\t\tcountry: 'RU',\n\t\t\tvalue: undefined\n\t\t})\n\t})\n\n\tit('should handle phone digits change (`international: false`)', () => {\n\t\tconst onChange = (phoneDigits, prevPhoneDigits, country) => onPhoneDigitsChange(phoneDigits, {\n\t\t\tprevPhoneDigits,\n\t\t\tcountry,\n\t\t\tinternational: false,\n\t\t\tmetadata\n\t\t})\n\n\t\t// `phoneDigits` in international format.\n\t\t// Just country calling code.\n\t\tonChange('+7', '', 'RU').should.deep.equal({\n\t\t\tphoneDigits: '',\n\t\t\tcountry: 'RU',\n\t\t\tvalue: undefined\n\t\t})\n\n\t\t// `phoneDigits` in international format.\n\t\t// Country calling code and first digit.\n\t\t// (which is assumed a \"national prefix\").\n\t\tonChange('+78', '', 'RU').should.deep.equal({\n\t\t\tphoneDigits: '8',\n\t\t\tcountry: 'RU',\n\t\t\t// value: undefined\n\t\t\tvalue: '+7'\n\t\t})\n\n\t\t// `phoneDigits` in international format.\n\t\t// Country calling code and first two digits.\n\t\tonChange('+121', '', 'US').should.deep.equal({\n\t\t\tphoneDigits: '21',\n\t\t\tcountry: 'US',\n\t\t\tvalue: '+121'\n\t\t})\n\n\t\t// `phoneDigits` in international format.\n\t\tonChange('+78005553535', '', 'RU').should.deep.equal({\n\t\t\tphoneDigits: '88005553535',\n\t\t\tcountry: 'RU',\n\t\t\tvalue: '+78005553535'\n\t\t})\n\n\t\t// `phoneDigits` in international format.\n\t\t// Another country: just trims the `+`.\n\t\tonChange('+78005553535', '', 'US').should.deep.equal({\n\t\t\tphoneDigits: '78005553535',\n\t\t\tcountry: 'US',\n\t\t\tvalue: '+178005553535'\n\t\t})\n\n\t\t// `phoneDigits` in national format.\n\t\tonChange('88005553535', '', 'RU').should.deep.equal({\n\t\t\tphoneDigits: '88005553535',\n\t\t\tcountry: 'RU',\n\t\t\tvalue: '+78005553535'\n\t\t})\n\n\t\t// `phoneDigits` in national format.\n\t\tonChange('88005553535', '8800555353', 'RU').should.deep.equal({\n\t\t\tphoneDigits: '88005553535',\n\t\t\tcountry: 'RU',\n\t\t\tvalue: '+78005553535'\n\t\t})\n\n\t\t// Empty `phoneDigits`.\n\t\tonChange('', '88005553535', 'RU').should.deep.equal({\n\t\t\tphoneDigits: '',\n\t\t\tcountry: 'RU',\n\t\t\tvalue: undefined\n\t\t})\n\t})\n\n\tit('should handle phone digits change (`international: false` and no country selected)', () => {\n\t\t// If `international` is `false` then it means that\n\t\t// \"International\" option should not be available,\n\t\t// so it doesn't handle the cases when it is available.\n\n\t\tconst onChange = (phoneDigits) => onPhoneDigitsChange(phoneDigits, {\n\t\t\tprevPhoneDigits: '',\n\t\t\tinternational: false,\n\t\t\tmetadata\n\t\t})\n\n\t\t// `phoneDigits` in international format.\n\t\t// No country calling code.\n\t\tonChange('+').should.deep.equal({\n\t\t\tphoneDigits: '+',\n\t\t\tcountry: undefined,\n\t\t\tvalue: undefined\n\t\t})\n\n\t\t// `phoneDigits` in international format.\n\t\t// Just country calling code.\n\t\tonChange('+7').should.deep.equal({\n\t\t\tphoneDigits: '+7',\n\t\t\tcountry: undefined,\n\t\t\tvalue: '+7'\n\t\t})\n\n\t\t// `phoneDigits` in international format.\n\t\t// Country calling code and first digit.\n\t\t// (which is assumed a \"national prefix\").\n\t\tonChange('+78').should.deep.equal({\n\t\t\tphoneDigits: '8',\n\t\t\tcountry: 'RU',\n\t\t\t// value: undefined\n\t\t\tvalue: '+7'\n\t\t})\n\n\t\t// `phoneDigits` in international format.\n\t\t// Country calling code and first two digits.\n\t\tonChange('+3311').should.deep.equal({\n\t\t\tphoneDigits: '11',\n\t\t\tcountry: 'FR',\n\t\t\tvalue: '+3311'\n\t\t})\n\n\t\t// `phoneDigits` in international format.\n\t\t// Full number.\n\t\tonChange('+78005553535').should.deep.equal({\n\t\t\tphoneDigits: '88005553535',\n\t\t\tcountry: 'RU',\n\t\t\tvalue: '+78005553535'\n\t\t})\n\t})\n\n\tit('should get initial parsed input', () => {\n\t\tgetInitialPhoneDigits({\n\t\t\tvalue: '+78005553535',\n\t\t\tdefaultCountry: 'RU',\n\t\t\tinternational: false,\n\t\t\tmetadata\n\t\t}).should.equal('+78005553535')\n\n\t\tgetInitialPhoneDigits({\n\t\t\tvalue: '+78005553535',\n\t\t\tdefaultCountry: 'RU',\n\t\t\tinternational: true,\n\t\t\tmetadata\n\t\t}).should.equal('+78005553535')\n\n\t\tgetInitialPhoneDigits({\n\t\t\tvalue: undefined,\n\t\t\tdefaultCountry: 'RU',\n\t\t\tinternational: true,\n\t\t\tmetadata\n\t\t}).should.equal('+7')\n\n\t\texpect(getInitialPhoneDigits({\n\t\t\tvalue: undefined,\n\t\t\tdefaultCountry: 'RU',\n\t\t\tinternational: false,\n\t\t\tmetadata\n\t\t})).to.be.undefined\n\n\t\texpect(getInitialPhoneDigits({\n\t\t\tvalue: undefined,\n\t\t\tinternational: false,\n\t\t\tmetadata\n\t\t})).to.be.undefined\n\t})\n\n\tit('should get initial parsed input (has `phoneNumber` that has `country`)', () => {\n\t\tconst phoneNumber = parsePhoneNumber('+78005553535', metadata)\n\t\tgetInitialPhoneDigits({\n\t\t\tvalue: phoneNumber.number,\n\t\t\tdefaultCountry: 'RU',\n\t\t\tuseNationalFormat: true,\n\t\t\tphoneNumber,\n\t\t\tmetadata\n\t\t}).should.equal('88005553535')\n\t})\n\n\tit('should get initial parsed input (has `phoneNumber` that has no `country`)', () => {\n\t\tconst phoneNumber = parsePhoneNumber('+870773111632', metadata)\n\t\tgetInitialPhoneDigits({\n\t\t\tvalue: phoneNumber.number,\n\t\t\tdefaultCountry: 'RU',\n\t\t\tuseNationalFormat: true,\n\t\t\tphoneNumber,\n\t\t\tmetadata\n\t\t}).should.equal('+870773111632')\n\t})\n})"],"mappings":"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"}