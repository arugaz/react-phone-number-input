{"version":3,"file":"usePhoneDigits.js","names":["useRef","useState","useCallback","useEffect","AsYouType","getCountryCallingCode","parseDigits","getInternationalPhoneNumberPrefix","usePhoneDigits","value","onChange","country","defaultCountry","international","withCountryCallingCode","useNationalFormatForDefaultCountryValue","metadata","countryMismatchDetected","onCountryMismatch","actualCountry","console","error","current","getInitialPhoneDigits","options","getPhoneDigitsForValue","args","apply","prevCountry","setPrevCountry","prevDefaultCountry","setPrevDefaultCountry","phoneDigits","setPhoneDigits","valueForPhoneDigits","setValueForPhoneDigits","rerenderTrigger","setRerenderTrigger","rerender","getValueForPhoneDigits","asYouType","input","getNumberValue","onSetPhoneDigits","prefix","indexOf","undefined","slice","phoneNumber","getNumber","countryCallingCode","nationalNumber","formatNational"],"sources":["../source/usePhoneDigits.js"],"sourcesContent":["import { useRef, useState, useCallback, useEffect } from 'react'\nimport { AsYouType, getCountryCallingCode, parseDigits } from 'libphonenumber-js/core'\n\nimport getInternationalPhoneNumberPrefix from './helpers/getInternationalPhoneNumberPrefix.js'\n\n/**\n * Returns `[phoneDigits, setPhoneDigits]`.\n * \"Phone digits\" includes not only \"digits\" but also a `+` sign.\n */\nexport default function usePhoneDigits({\n\tvalue,\n\tonChange,\n\tcountry,\n\tdefaultCountry,\n\tinternational,\n\twithCountryCallingCode,\n\tuseNationalFormatForDefaultCountryValue,\n\tmetadata\n}) {\n\tconst countryMismatchDetected = useRef()\n\tconst onCountryMismatch = (value, country, actualCountry) => {\n\t\tconsole.error(`[react-phone-number-input] Expected phone number ${value} to correspond to country ${country} but ${actualCountry ? 'in reality it corresponds to country ' + actualCountry : 'it doesn\\'t'}.`)\n\t\tcountryMismatchDetected.current = true\n\t}\n\n\tconst getInitialPhoneDigits = (options) => {\n\t\treturn getPhoneDigitsForValue(\n\t\t\tvalue,\n\t\t\tcountry,\n\t\t\tinternational,\n\t\t\twithCountryCallingCode,\n\t\t\tdefaultCountry,\n\t\t\tuseNationalFormatForDefaultCountryValue,\n\t\t\tmetadata,\n\t\t\t(...args) => {\n\t\t\t\tif (options && options.onCountryMismatch) {\n\t\t\t\t\toptions.onCountryMismatch()\n\t\t\t\t}\n\t\t\t\tonCountryMismatch.apply(this, args)\n\t\t\t}\n\t\t)\n\t}\n\n\t// This is only used to detect `country` property change.\n\tconst [prevCountry, setPrevCountry] = useState(country)\n\t// This is only used to detect `defaultCountry` property change.\n\tconst [prevDefaultCountry, setPrevDefaultCountry] = useState(defaultCountry)\n\t// `phoneDigits` is the `value` passed to the `<input/>`.\n\tconst [phoneDigits, setPhoneDigits] = useState(getInitialPhoneDigits())\n\t// This is only used to detect `value` property changes.\n\tconst [valueForPhoneDigits, setValueForPhoneDigits] = useState(value)\n\n\t// Rerender hack.\n\tconst [rerenderTrigger, setRerenderTrigger] = useState()\n\tconst rerender = useCallback(() => setRerenderTrigger({}), [setRerenderTrigger])\n\n\tfunction getValueForPhoneDigits(phoneDigits) {\n\t\t// If the user hasn't input any digits then `value` is `undefined`.\n\t\tif (!phoneDigits) {\n\t\t\treturn\n\t\t}\n\t\tif (country && international && !withCountryCallingCode) {\n\t\t\tphoneDigits = `+${getCountryCallingCode(country, metadata)}${phoneDigits}`\n\t\t}\n\t\t// Return the E.164 phone number value.\n\t\t//\n\t\t// Even if no \"national (significant) number\" digits have been input,\n\t\t// still return a non-`undefined` value.\n\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/113\n\t\t//\n\t\t// For example, if the user has selected country `US` and entered `\"1\"`\n\t\t// then that `\"1\"` is just a \"national prefix\" and no \"national (significant) number\"\n\t\t// digits have been input yet. Still, return `\"+1\"` as `value` in such cases,\n\t\t// because otherwise the app would think that the input is empty and mark it as such\n\t\t// while in reality it isn't empty, which might be thought of as a \"bug\", or just\n\t\t// a \"weird\" behavior.\n\t\t//\n\t\t// The only case when there's any input and `getNumberValue()` still returns `undefined`\n\t\t// is when that input is `\"+\"`.\n\t\t//\n\t\tconst asYouType = new AsYouType(country || defaultCountry, metadata)\n\t\tasYouType.input(phoneDigits)\n\t\treturn asYouType.getNumberValue()\n\t}\n\n\t// If `value` property has been changed externally\n\t// then re-initialize the component.\n\tuseEffect(() => {\n\t\tif (value !== valueForPhoneDigits) {\n\t\t\tsetValueForPhoneDigits(value)\n\t\t\tsetPhoneDigits(getInitialPhoneDigits())\n\t\t}\n\t}, [value])\n\n\t// If the `country` has been changed then re-initialize the component.\n\tuseEffect(() => {\n\t\tif (country !== prevCountry) {\n\t\t\tsetPrevCountry(country)\n\t\t\tlet countryMismatchDetected\n\t\t\tconst phoneDigits = getInitialPhoneDigits({\n\t\t\t\tonCountryMismatch() {\n\t\t\t\t\tcountryMismatchDetected = true\n\t\t\t\t}\n\t\t\t})\n\t\t\tsetPhoneDigits(phoneDigits)\n\t\t\tif (countryMismatchDetected) {\n\t\t\t\tsetValueForPhoneDigits(getValueForPhoneDigits(phoneDigits))\n\t\t\t}\n\t\t}\n\t}, [country])\n\n\t// If the `defaultCountry` has been changed then re-initialize the component.\n\tuseEffect(() => {\n\t\tif (defaultCountry !== prevDefaultCountry) {\n\t\t\tsetPrevDefaultCountry(defaultCountry)\n\t\t\tsetPhoneDigits(getInitialPhoneDigits())\n\t\t}\n\t}, [defaultCountry])\n\n\t// Update the `value` after `valueForPhoneDigits` has been updated.\n\tuseEffect(() => {\n\t\tif (valueForPhoneDigits !== value) {\n\t\t\tonChange(valueForPhoneDigits)\n\t\t}\n\t}, [valueForPhoneDigits])\n\n\tconst onSetPhoneDigits = useCallback((phoneDigits) => {\n\t\tlet value\n\t\tif (country) {\n\t\t\tif (international && withCountryCallingCode) {\n\t\t\t\t// The `<input/>` value must start with the country calling code.\n\t\t\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\n\t\t\t\tif (phoneDigits.indexOf(prefix) !== 0) {\n\t\t\t\t\t// If a user tabs into a phone number input field\n\t\t\t\t\t// that is `international` and `withCountryCallingCode`,\n\t\t\t\t\t// and then starts inputting local phone number digits,\n\t\t\t\t\t// the first digit would get \"swallowed\" if the fix below wasn't implemented.\n\t\t\t\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/43\n\t\t\t\t\tif (phoneDigits && phoneDigits[0] !== '+') {\n\t\t\t\t\t\tphoneDigits = prefix + phoneDigits\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// // Reset phone digits if they don't start with the correct prefix.\n\t\t\t\t\t\t// // Undo the `<input/>` value change if it doesn't.\n\t\t\t\t\t\tif (countryMismatchDetected.current) {\n\t\t\t\t\t\t\t// In case of a `country`/`value` mismatch,\n\t\t\t\t\t\t\t// if it performed an \"undo\" here, then\n\t\t\t\t\t\t\t// it wouldn't let a user edit their phone number at all,\n\t\t\t\t\t\t\t// so this special case at least allows phone number editing\n\t\t\t\t\t\t\t// when `value` already doesn't match the `country`.\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// If it simply did `phoneDigits = prefix` here,\n\t\t\t\t\t\t\t// then it could have no effect when erasing phone number\n\t\t\t\t\t\t\t// via Backspace, because `phoneDigits` in `state` wouldn't change\n\t\t\t\t\t\t\t// as a result, because it was `prefix` and it became `prefix`,\n\t\t\t\t\t\t\t// so the component wouldn't rerender, and the user would be able\n\t\t\t\t\t\t\t// to erase the country calling code part, and that part is\n\t\t\t\t\t\t\t// assumed to be non-eraseable. That's why the component is\n\t\t\t\t\t\t\t// forcefully rerendered here.\n\t\t\t\t\t\t\tsetPhoneDigits(prefix)\n\t\t\t\t\t\t\tsetValueForPhoneDigits(undefined)\n\t\t\t\t\t\t\t// Force a re-render of the `<input/>` with previous `phoneDigits` value.\n\t\t\t\t\t\t\treturn rerender()\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Entering phone number either in \"national\" format\n\t\t\t\t// when `country` has been specified, or in \"international\" format\n\t\t\t\t// when `country` has been specified but `withCountryCallingCode` hasn't.\n\t\t\t\t// Therefore, `+` is not allowed.\n\t\t\t\tif (phoneDigits && phoneDigits[0] === '+') {\n\t\t\t\t\t// Remove the `+`.\n\t\t\t\t\tphoneDigits = phoneDigits.slice(1)\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!defaultCountry) {\n\t\t\t// Force a `+` in the beginning of a `value`\n\t\t\t// when no `country` and `defaultCountry` have been specified.\n\t\t\tif (phoneDigits && phoneDigits[0] !== '+') {\n\t\t\t\t// Prepend a `+`.\n\t\t\t\tphoneDigits = '+' + phoneDigits\n\t\t\t}\n\t\t}\n\t\t// Convert `phoneDigits` to `value`.\n\t\tif (phoneDigits) {\n\t\t\tvalue = getValueForPhoneDigits(phoneDigits)\n\t\t}\n\t\tsetPhoneDigits(phoneDigits)\n\t\tsetValueForPhoneDigits(value)\n\t}, [\n\t\tcountry,\n\t\tinternational,\n\t\twithCountryCallingCode,\n\t\tdefaultCountry,\n\t\tmetadata,\n\t\tsetPhoneDigits,\n\t\tsetValueForPhoneDigits,\n\t\trerender,\n\t\tcountryMismatchDetected\n\t])\n\n\treturn [\n\t\tphoneDigits,\n\t\tonSetPhoneDigits\n\t]\n}\n\n/**\n * Returns phone number input field value for a E.164 phone number `value`.\n * @param  {string} [value]\n * @param  {string} [country]\n * @param  {boolean} [international]\n * @param  {boolean} [withCountryCallingCode]\n * @param  {string} [defaultCountry]\n * @param  {boolean} [useNationalFormatForDefaultCountryValue]\n * @param  {object} metadata\n * @return {string}\n */\nfunction getPhoneDigitsForValue(\n\tvalue,\n\tcountry,\n\tinternational,\n\twithCountryCallingCode,\n\tdefaultCountry,\n\tuseNationalFormatForDefaultCountryValue,\n\tmetadata,\n\tonCountryMismatch\n) {\n\tif (country && international && withCountryCallingCode) {\n\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\n\t\tif (value) {\n\t\t\tif (value.indexOf(prefix) !== 0) {\n\t\t\t\tonCountryMismatch(value, country)\n\t\t\t}\n\t\t\treturn value\n\t\t}\n\t\treturn prefix\n\t}\n\tif (!value) {\n\t\treturn ''\n\t}\n\tif (!country && !defaultCountry) {\n\t\treturn value\n\t}\n\tconst asYouType = new AsYouType(undefined, metadata)\n\tasYouType.input(value)\n\tconst phoneNumber = asYouType.getNumber()\n\tif (phoneNumber) {\n\t\tif (country) {\n\t\t\tif (phoneNumber.country && phoneNumber.country !== country) {\n\t\t\t\tonCountryMismatch(value, country, phoneNumber.country)\n\t\t\t} else if (phoneNumber.countryCallingCode !== getCountryCallingCode(country, metadata)) {\n\t\t\t\tonCountryMismatch(value, country)\n\t\t\t}\n\t\t\tif (international) {\n\t\t\t\treturn phoneNumber.nationalNumber\n\t\t\t}\n\t\t\treturn parseDigits(phoneNumber.formatNational())\n\t\t} else {\n\t\t\t// `phoneNumber.countryCallingCode` is compared here  instead of\n\t\t\t// `phoneNumber.country`, because, for example, a person could have\n\t\t\t// previously input a phone number (in \"national\" format) that isn't\n\t\t\t// 100% valid for the `defaultCountry`, and if `phoneNumber.country`\n\t\t\t// was compared, then it wouldn't match, and such phone number\n\t\t\t// wouldn't be formatted as a \"national\" one, and instead would be\n\t\t\t// formatted as an \"international\" one, confusing the user.\n\t\t\t// Comparing `phoneNumber.countryCallingCode` works around such issues.\n\t\t\t//\n\t\t\t// Example: `defaultCountry=\"US\"` and the `<input/>` is empty.\n\t\t\t// The user inputs: \"222 333 4444\", which gets formatted to \"(222) 333-4444\".\n\t\t\t// The user then clicks \"Save\", the page is refreshed, and the user sees\n\t\t\t// that the `<input/>` value is now \"+1 222 333 4444\" which confuses the user:\n\t\t\t// the user expected the `<input/>` value to be \"(222) 333-4444\", same as it\n\t\t\t// was when they've just typed it in. The cause of the issue is that \"222 333 4444\"\n\t\t\t// is not a valid national number for US, and `phoneNumber.country` is compared\n\t\t\t// instead of `phoneNumber.countryCallingCode`. After the `phoneNumber.country`\n\t\t\t// comparison is replaced with `phoneNumber.countryCallingCode` one, the issue\n\t\t\t// is no longer the case.\n\t\t\t//\n\t\t\tif (phoneNumber.countryCallingCode && phoneNumber.countryCallingCode === getCountryCallingCode(defaultCountry, metadata) && useNationalFormatForDefaultCountryValue) {\n\t\t\t\treturn parseDigits(phoneNumber.formatNational())\n\t\t\t}\n\t\t\treturn value\n\t\t}\n\t} else {\n\t\treturn ''\n\t}\n}"],"mappings":"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"}